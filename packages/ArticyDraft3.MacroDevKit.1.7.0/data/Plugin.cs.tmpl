using System.Collections.Generic;
using System.Windows.Media;
using Articy.Api;
using Articy.Api.Plugins;

using Texts = LIds.$RootNamespace$;

namespace $RootNamespace$
{
	/// <summary>
	/// public implementation part of plugin code, contains all overrides of the plugin class.
	/// </summary>
	public partial class Plugin : MacroPlugin
	{
		public override string DisplayName
		{
			get { return LocalizeStringNoFormat(Texts.Plugin.DisplayName); }
		}

		public override string ContextName
		{
			get { return LocalizeStringNoFormat(Texts.Plugin.ContextName); }
		}

		public override List<MacroCommandDescriptor> GetMenuEntries(List<ObjectProxy> aSelectedObjects, ContextMenuContext aContext )
		{
			var result = new List<MacroCommandDescriptor>();
			switch ( aContext )
			{
				case ContextMenuContext.Global:
					// entries for the "global" commands of the ribbon menu are requested
					return result;
					
				default:
					// normal context menu when working in the content area, navigator, search
					return result;
			}
		}

		public override Brush GetIcon(string aIconName)
		{
			switch (aIconName)
			{
				// if you have specified the "IconFile" in the PluginManifest.xml you don't need this case
				// unless you want to have an icon that differs when the plugin is loaded from the non-loaded case
				// or you want to put all icons within the resources of your plugin assembly
				/*
				case "$self":
					// get the main icon for the plugin
					return Session.CreateBrushFromFile(Manifest.ManifestPath+"Resources\\Icon.png");
				*/
			}
			return null;
		}
	}
}
